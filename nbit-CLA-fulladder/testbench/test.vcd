$date
	Mon Nov 16 12:29:45 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 65 ! add_result64 [64:0] $end
$var reg 64 " first64 [63:0] $end
$var reg 64 # second64 [63:0] $end
$scope module adder64 $end
$var wire 64 $ num_one [63:0] $end
$var wire 64 % num_two [63:0] $end
$var wire 65 & S [64:0] $end
$var reg 65 ' Cins [64:0] $end
$var reg 1 ( cout $end
$var reg 64 ) generates [63:0] $end
$var reg 64 * propagates [63:0] $end
$var reg 64 + sum [63:0] $end
$var integer 32 , i [31:0] $end
$var integer 32 - j [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1000000 -
b1000000 ,
b1000000000100100100000011010010000000010000001100000000 +
b1000000000011010100000011010010000000001111101100000000 *
b101000000000000000000000000000010000000000 )
0(
b111110000000000000000000000011111100000000000 '
b1000000000100100100000011010010000000010000001100000000 &
b1000000000000101100000011000010000000001111110000000000 %
b11111000000000010000000000000000011100000000 $
b1000000000000101100000011000010000000001111110000000000 #
b11111000000000010000000000000000011100000000 "
b1000000000100100100000011010010000000010000001100000000 !
$end
#1
0(
b1000000 -
b1000000 ,
b11011100000000000111011100011000010000000001111110000000000 !
b11011100000000000111011100011000010000000001111110000000000 &
b11011100000000000111011100011000010000000001111110000000000 +
b11011100000000000100011100011000010000000001111110000000000 *
b1100000000000000000000000000000000000000 )
b11000000000000000000000000000000000000000 '
b11010100000000000001111100000000000000000000000000000000000 "
b11010100000000000001111100000000000000000000000000000000000 $
#2
0(
b1000000 -
b1000000 ,
b1000000000001000010110001100010001101110101110000000000 !
b1000000000001000010110001100010001101110101110000000000 &
b1000000000001000010110001100010001101110101110000000000 +
b1000000000000111010101101100010001101101001110000000000 *
b100000010000000000000000110000000000000 )
b1111000011100000000000000011100000000000000 '
b10110101110100000001101100110000000000000 #
b10110101110100000001101100110000000000000 %
b1000000000000101100000011000010000000001111110000000000 "
b1000000000000101100000011000010000000001111110000000000 $
#52
