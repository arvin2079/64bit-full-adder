$date
	Tue Oct 20 00:43:28 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 9 ! add_result [8:0] $end
$var reg 8 " first [7:0] $end
$var reg 8 # second [7:0] $end
$scope module adder $end
$var wire 8 $ num_one [7:0] $end
$var wire 8 % num_two [7:0] $end
$var wire 8 & sum [7:0] $end
$var wire 8 ' propagates [7:0] $end
$var wire 8 ( generates [7:0] $end
$var wire 9 ) S [8:0] $end
$var wire 9 * Cins [8:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$scope begin genblk2[0] $end
$var wire 1 + cout $end
$scope module adder $end
$var wire 1 , Cin $end
$var wire 1 + Cout $end
$var wire 1 - s $end
$var wire 1 . x $end
$var wire 1 / y $end
$upscope $end
$upscope $end
$scope begin genblk2[1] $end
$var wire 1 0 cout $end
$scope module adder $end
$var wire 1 1 Cin $end
$var wire 1 0 Cout $end
$var wire 1 2 s $end
$var wire 1 3 x $end
$var wire 1 4 y $end
$upscope $end
$upscope $end
$scope begin genblk2[2] $end
$var wire 1 5 cout $end
$scope module adder $end
$var wire 1 6 Cin $end
$var wire 1 5 Cout $end
$var wire 1 7 s $end
$var wire 1 8 x $end
$var wire 1 9 y $end
$upscope $end
$upscope $end
$scope begin genblk2[3] $end
$var wire 1 : cout $end
$scope module adder $end
$var wire 1 ; Cin $end
$var wire 1 : Cout $end
$var wire 1 < s $end
$var wire 1 = x $end
$var wire 1 > y $end
$upscope $end
$upscope $end
$scope begin genblk2[4] $end
$var wire 1 ? cout $end
$scope module adder $end
$var wire 1 @ Cin $end
$var wire 1 ? Cout $end
$var wire 1 A s $end
$var wire 1 B x $end
$var wire 1 C y $end
$upscope $end
$upscope $end
$scope begin genblk2[5] $end
$var wire 1 D cout $end
$scope module adder $end
$var wire 1 E Cin $end
$var wire 1 D Cout $end
$var wire 1 F s $end
$var wire 1 G x $end
$var wire 1 H y $end
$upscope $end
$upscope $end
$scope begin genblk2[6] $end
$var wire 1 I cout $end
$scope module adder $end
$var wire 1 J Cin $end
$var wire 1 I Cout $end
$var wire 1 K s $end
$var wire 1 L x $end
$var wire 1 M y $end
$upscope $end
$upscope $end
$scope begin genblk2[7] $end
$var wire 1 N cout $end
$scope module adder $end
$var wire 1 O Cin $end
$var wire 1 N Cout $end
$var wire 1 P s $end
$var wire 1 Q x $end
$var wire 1 R y $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#50
b100 !
b100 )
b10 &
12
11
b10 *
1+
b1 (
1/
1.
b1 #
b1 %
b1 "
b1 $
#150
07
06
01
b0 *
00
1-
0+
b110 !
b110 )
b11 &
12
b0 (
b11 '
0.
13
b10 "
b10 $
#250
1F
1E
1?
1<
1;
1@
b111000 *
0-
02
15
1:
b1010000 !
b1010000 )
b101000 &
0A
b1100 (
b10000 '
0/
19
1>
03
18
1=
1B
b1100 #
b1100 %
b11100 "
b11100 $
#350
